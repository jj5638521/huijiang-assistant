name: Auto release on latest

on:
  push:
    paths:
      - 'rules/01_工资模块_latest.md'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure UTF-8
        run: |
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "LC_ALL=C.UTF-8" >> "$GITHUB_ENV"

      - name: Parse version from latest（支持 -HFx）
        id: v
        shell: bash
        run: |
          set -euo pipefail
          L='rules/01_工资模块_latest.md'
          test -f "$L" || { echo "❌ 缺少 $L"; exit 1; }
          # 兼容：版本 vYYYY-MM-DDRn 或 版本 vYYYY-MM-DDRn-HF2（全/半角冒号都行）
          line="$(grep -E -m1 '^[[:space:]]*版本[[:space:]:：]*v[0-9]{4}-[0-9]{2}-[0-9]{2}R[0-9]+(-HF[0-9]+)?[[:space:]]*$' "$L" || true)"
          [ -n "$line" ] || { echo "❌ 未解析到版本号"; exit 1; }
          ver="$(sed -E 's/.*(v[0-9]{4}-[0-9]{2}-[0-9]{2}R[0-9]+(-HF[0-9]+)?).*/\1/' <<<"$line")"
          echo "ver=$ver" >> "$GITHUB_OUTPUT"
          echo "✅ 版本：$ver"

      - name: Prepare artifact（若无版本化文件则临时拷贝）
        id: art
        shell: bash
        run: |
          set -euo pipefail
          ver='${{ steps.v.outputs.ver }}'
          src='rules/01_工资模块_latest.md'
          dst="01_工资模块_${ver}.md"
          if [ -f "rules/${dst}" ]; then
            cp "rules/${dst}" "${dst}"
          else
            cp "${src}" "${dst}"
          fi
          echo "file=${dst}" >> "$GITHUB_OUTPUT"

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ steps.v.outputs.ver }}
          name: 01_工资模块 ${{ steps.v.outputs.ver }}
          body: |
            自动发布：latest 变更触发。
            - 规则版本：${{ steps.v.outputs.ver }}
            - 文件：01_工资模块_${{ steps.v.outputs.ver }}.md
          artifacts: ${{ steps.art.outputs.file }}
          allowUpdates: true
          replaceArtifacts: true
          makeLatest: true
          draft: false
          prerelease: false
